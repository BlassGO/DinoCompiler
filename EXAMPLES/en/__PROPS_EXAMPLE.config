:COMMAND -> file = [-file, -f], result = [-output, -o]
    Msg "Input" con file[1]
    Msg "Output" con result[1]
:LITERAL_COMMAND -> LITERAL_COMMAND = [literal=1]
    # Properties are defined in the same way as Nicknames, but are distinguished by their writing "PROPERTY=VALUE"
    For KEY VALUE In LITERAL_COMMAND
       Msg "PARAMETER" With VALUE
:LITERAL_COMMAND_2 -> LITERAL_COMMAND_2 = [literal=1], ADDITIONAL = [literal=1]
    # Using the "literal" property does not prevent connector recognition
    # That is, if you want connectors to also accept literal parameters, you must define the same property in the connector
    For KEY VALUE In LITERAL_COMMAND_2
       Msg "PARAMETER" With VALUE
    For KEY VALUE In ADDITIONAL
       Msg "ADDITIONAL PARAMETER" With VALUE
:LITERAL_COMMAND_3 -> my_connector = [Nickname1, Nickname2, literal=1, max=2]
   # Nicknames and properties can be defined at the same time
   # In this case, the use of literal parameters was activated and limited to 2 parameters, only for the connector "my_connector"
   For KEY VALUE In my_connector
       Msg "PARAMETER" With VALUE
:MAIN
  # Using DinoCode Nicknames for connectors it is possible to simulate options like "-f" "-o"
  # In addition to obtaining the information already organized
  Print "First example"
  command -f "test entry" -output "test output"
  
  # But if you want to process undefined or unknown parameters, it is necessary to activate properties like "literal=1"
  Print "Second example"
  literal_command -a -b -c -d -e -f

  # Connectors can still group their own parameters even when the "literal=1" property was enabled in the main function
  Print "Third example"
  literal_command_2 -a -b -c ADDITIONAL -d -e -f

  # If the number of parameters is limited, it implies an ERROR if it is not respected.
  # The following action will generate an error, since "Nickname1" can only receive 2 parameters
  Print "Fourth example"
  literal_command_3 "a" "b" "c" Nickname1 1 2 3

